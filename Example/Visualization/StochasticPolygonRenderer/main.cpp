/*****************************************************************************/
/**
 *  @file   main.cpp
 *  @author Naohisa Sakamoto
 *  @brief  Example program for kvs::StochasticPolygonRenderer class.
 */
/*****************************************************************************/
#include <kvs/Application>
#include <kvs/Screen>
#include <kvs/CheckBox>
#include <kvs/Slider>
#include <kvs/PolygonObject>
#include <kvs/PolygonImporter>
#include <kvs/StructuredVolumeObject>
#include <kvs/HydrogenVolumeData>
#include <kvs/Isosurface>
#include <kvs/StochasticPolygonRenderer>
#include <kvs/Scene>
#include <kvs/ObjectManager>
#include <kvs/RendererManager>
#include <iostream>


/*===========================================================================*/
/**
 *  @brief  Main function.
 *  @param  argc [i] argument counter
 *  @param  argv [i] argument values
 *  @return true, if the main process is done succesfully
 */
/*===========================================================================*/
int main( int argc, char** argv )
{
    kvs::Application app( argc, argv );
    kvs::Screen screen( &app );
    screen.setTitle("Example program for kvs::StochasticPolygonRenderer");
    screen.create();

    // If the data file isn't specified, a hydrogen volume data is generated by
    // using kvs::HydrogenVolumeData class and then an isosurface polygon object
    // is extracted from the volume data.
    auto* object = [&]() -> kvs::PolygonObject*
    {
        if ( argc > 1 ) return new kvs::PolygonImporter( argv[1] );

        auto* volume = new kvs::HydrogenVolumeData( { 64, 64, 64 } );
        volume->updateMinMaxValues();
        const auto i = ( volume->maxValue() + volume->minValue() ) * 0.5;
        const auto n = kvs::PolygonObject::VertexNormal;
        const auto d = false;
        const auto t = kvs::TransferFunction( 256 );
        auto* temp = new kvs::Isosurface( volume, i, n, d, t );
        delete volume;
        return temp;
    }();
    object->setName( "Polygon" );
    object->setOpacity( 128 );
    object->print( std::cout );

    auto* renderer = new kvs::StochasticPolygonRenderer();
    renderer->setName( "Renderer" );
    renderer->setRepetitionLevel( 50 );
    renderer->setEdgeFactor( 0.0f );
    renderer->setLODControlEnabled( true );

    screen.registerObject( object, renderer );

    kvs::CheckBox checkbox( &screen );
    checkbox.setMargin( 10 );
    checkbox.setCaption( "Level-of-Detail" );
    checkbox.setState( true );
    checkbox.anchorToTopLeft();
    checkbox.stateChanged( [&]()
    {
        renderer->setLODControlEnabled( checkbox.state() );
        screen.redraw();
    } );
    checkbox.show();

    kvs::Slider opacity( &screen );
    opacity.setWidth( 150 );
    opacity.setMargin( 10 );
    opacity.setCaption( "Opacity" );
    opacity.setValue( 0.5 );
    opacity.setRange( 0, 1 );
    opacity.anchorToBottom( &checkbox );
    opacity.valueChanged( [&]()
    {
        auto* scene = screen.scene();
        auto* object1 = kvs::PolygonObject::DownCast( scene->object( "Polygon" ) );
        auto* object2 = new kvs::PolygonObject();
        object2->shallowCopy( *object1 );
        object2->setName( "Polygon" );
        object2->setOpacity( int( opacity.value() * 255 + 0.5 ) );
        scene->replaceObject( "Polygon", object2 );
    } );
    opacity.show();

    kvs::Slider repetition( &screen );
    repetition.setWidth( 150 );
    repetition.setMargin( 10 );
    repetition.setCaption( "Repetition" );
    repetition.setValue( 50 );
    repetition.setRange( 1, 100 );
    repetition.anchorToBottom( &opacity );
    repetition.valueChanged( [&]()
    {
        renderer->setRepetitionLevel( int( repetition.value() + 0.5 ) );
        screen.redraw();
    } );
    repetition.show();

    kvs::Slider edge( &screen );
    edge.setWidth( 150 );
    edge.setMargin( 10 );
    edge.setCaption( "Edge factor" );
    edge.setValue( 0 );
    edge.setRange( 0, 1 );
    edge.anchorToBottom( &repetition );
    edge.valueChanged( [&]()
    {
        renderer->setEdgeFactor( edge.value() );
        screen.redraw();
    } );
    edge.show();

    return app.run();
}
